{"nodes":[{"name":"Ejb2JpaController","group":4,"description":"<nobr>Package: acc</nobr><br/><br/>EJB:<br/><nobr>acc.ApplicationuserFacade is injected as an EJB</nobr>","sourcecode":"package acc;\n\nimport entities.Applicationuser;\nimport acc.util.JsfUtil;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.ResourceBundle;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.ejb.EJB;\nimport javax.ejb.EJBException;\nimport javax.inject.Named;\nimport javax.enterprise.context.SessionScoped;\nimport javax.faces.component.UIComponent;\nimport javax.faces.context.FacesContext;\nimport javax.faces.convert.Converter;\nimport javax.faces.convert.FacesConverter;\n\n@Named(\"ejb2JpaController\")\n@SessionScoped\npublic class Ejb2JpaController implements Serializable {\n\n    @EJB\n    private acc.ApplicationuserFacade ejbFacade;\n    private List&lt;Applicationuser&gt; items = null;\n    private Applicationuser selected;\n\n    public Ejb2JpaController() {\n    }\n\n    public Applicationuser getSelected() {\n        return selected;\n    }\n\n    public void setSelected(Applicationuser selected) {\n        this.selected = selected;\n    }\n\n    protected void setEmbeddableKeys() {\n    }\n\n    protected void initializeEmbeddableKey() {\n    }\n\n    public Applicationuser prepareCreate() {\n        selected = new Applicationuser();\n        initializeEmbeddableKey();\n        \n        return selected;\n    }\n\n    private ApplicationuserFacade getFacade() {\n        return ejbFacade;\n    }\n\n    public void create(Applicationuser selected) {\n        String successMessage = ResourceBundle.getBundle(\"/Bundle\").getString(\"ApplicationuserCreated\");\n        if (selected != null) {\n            setEmbeddableKeys();\n            try {\n                getFacade().edit(selected);\n                JsfUtil.showSuccessMessage(successMessage);\n            } catch (EJBException ex) {\n                JsfUtil.showErrorMessageFromExceptionCause(ex, \"PersistenceErrorOccured\");\n            } catch (Exception ex) {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n                JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n            }\n        }\n        if (!JsfUtil.isValidationFailed()) {\n            items = null;    // Invalidate list of items to trigger re-query.\n        }\n    }\n\n    public void update(Applicationuser selected) {\n        String successMessage = ResourceBundle.getBundle(\"/Bundle\").getString(\"ApplicationuserUpdated\");\n        if (selected != null) {\n            setEmbeddableKeys();\n            try {\n                getFacade().edit(selected);\n                JsfUtil.showSuccessMessage(successMessage);\n            } catch (EJBException ex) {\n                JsfUtil.showErrorMessageFromExceptionCause(ex, \"PersistenceErrorOccured\");\n            } catch (Exception ex) {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n                JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n            }\n        }\n\n        //folgender Code mach Sinn, wenn das Update scheitert:\n        //selected = null; // Remove selection\n        //items = null;    // Invalidate list of items to trigger re-query.\n    }\n\n    public void destroy(Applicationuser selected) {\n        String successMessage = ResourceBundle.getBundle(\"/Bundle\").getString(\"ApplicationuserDeleted\");\n        if (selected != null) {\n            setEmbeddableKeys();\n            try {\n                getFacade().remove(selected);\n                JsfUtil.showSuccessMessage(successMessage);\n            } catch (EJBException ex) {\n                JsfUtil.showErrorMessageFromExceptionCause(ex, \"PersistenceErrorOccured\");\n            } catch (Exception ex) {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n                JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n            }\n        }\n\n        if (!JsfUtil.isValidationFailed()) {\n            selected = null; // Remove selection\n            items = null;    // Invalidate list of items to trigger re-query.\n        }\n    }\n\n    public List&lt;Applicationuser&gt; getItems() {\n        if (items == null) {\n            items = getFacade().findAll();\n        }\n        return items;\n    }\n\n    public Applicationuser getApplicationuser(Integer id) {\n        return getFacade().find(id);\n    }\n\n    public List&lt;Applicationuser&gt; getItemsAvailableSelectMany() {\n        return getFacade().findAll();\n    }\n\n    public List&lt;Applicationuser&gt; getItemsAvailableSelectOne() {\n        return getFacade().findAll();\n    }\n\n    @FacesConverter(forClass = Applicationuser.class)\n    public static class ApplicationuserControllerConverter implements Converter {\n\n        @Override\n        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {\n            if (value == null || value.length() == 0) {\n                return null;\n            }\n            Ejb2JpaController controller = (Ejb2JpaController) facesContext.getApplication().getELResolver().\n                    getValue(facesContext.getELContext(), null, \"applicationuserController\");\n            return controller.getApplicationuser(getKey(value));\n        }\n\n        Integer getKey(String value) {\n            Integer key;\n            key = Integer.valueOf(value);\n            return key;\n        }\n\n        String getStringKey(Integer value) {\n            StringBuilder sb = new StringBuilder();\n            sb.append(value);\n            return sb.toString();\n        }\n\n        @Override\n        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {\n            if (object == null) {\n                return null;\n            }\n            if (object instanceof Applicationuser) {\n                Applicationuser o = (Applicationuser) object;\n                return getStringKey(o.getId());\n            } else {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, \"object {0} is of type {1}; expected type: {2}\", new Object[]{object, object.getClass().getName(), Applicationuser.class.getName()});\n                return null;\n            }\n        }\n\n    }\n\n}\n","id":0},{"name":"PersonController","group":4,"description":"<nobr>Package: acc</nobr><br/><br/>EJB:<br/><nobr>acc.PersonFacade is injected as an EJB</nobr>","sourcecode":"package acc;\n\nimport entities.Person;\nimport acc.util.JsfUtil;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.ejb.EJB;\nimport javax.ejb.EJBException;\nimport javax.inject.Named;\nimport javax.enterprise.context.SessionScoped;\nimport javax.faces.component.UIComponent;\nimport javax.faces.context.FacesContext;\nimport javax.faces.convert.Converter;\nimport javax.faces.convert.FacesConverter;\n\n@Named(\"personController\")\n@SessionScoped\npublic class PersonController implements Serializable {\n\n    @EJB\n    private acc.PersonFacade ejbFacade;\n    private List&lt;Person&gt; items = null;\n    private Person selected;\n\n    public PersonController() {\n    }\n\n    public Person getSelected() {\n        return selected;\n    }\n\n    public void setSelected(Person selected) {\n        this.selected = selected;\n    }\n\n    protected void setEmbeddableKeys() {\n    }\n\n    protected void initializeEmbeddableKey() {\n    }\n\n    private PersonFacade getFacade() {\n        return ejbFacade;\n    }\n\n    public Person prepareCreate() {\n        selected = new Person();\n        initializeEmbeddableKey();\n        return selected;\n    }\n\n    public List&lt;Person&gt; getItems() {\n        if (items == null) {\n            items = getFacade().findAll();\n        }\n        return items;\n    }\n\n    private void persistCreate(String successMessage) {\n        if (selected != null) {\n            setEmbeddableKeys();\n            try {\n                getFacade().edit(selected);\n                JsfUtil.showSuccessMessage(successMessage);\n            } catch (EJBException ex) {\n                String msg = \"\";\n                Throwable cause = ex.getCause();\n                if (cause != null) {\n                    msg = cause.getLocalizedMessage();\n                }\n                if (msg.length() &gt; 0) {\n                    JsfUtil.showErrorMessage(msg);\n                } else {\n                    JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n                }\n            } catch (Exception ex) {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n                JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n            }\n        }\n    }\n\n    private void persistDelete(String successMessage) {\n        if (selected != null) {\n            setEmbeddableKeys();\n            try {\n                getFacade().remove(selected);\n                JsfUtil.showSuccessMessage(successMessage);\n            } catch (EJBException ex) {\n                String msg = \"\";\n                Throwable cause = ex.getCause();\n                if (cause != null) {\n                    msg = cause.getLocalizedMessage();\n                }\n                if (msg.length() &gt; 0) {\n                    JsfUtil.showErrorMessage(msg);\n                } else {\n                    JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n                }\n            } catch (Exception ex) {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n                JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n            }\n        }\n    }\n\n    private void persistUpdate(String successMessage) {\n        if (selected != null) {\n            setEmbeddableKeys();\n            try {\n                getFacade().edit(selected);\n                JsfUtil.showSuccessMessage(successMessage);\n            } catch (EJBException ex) {\n                String msg = \"\";\n                Throwable cause = ex.getCause();\n                if (cause != null) {\n                    msg = cause.getLocalizedMessage();\n                }\n                if (msg.length() &gt; 0) {\n                    JsfUtil.showErrorMessage(msg);\n                } else {\n                    JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n                }\n            } catch (Exception ex) {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n                JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n            }\n        }\n    }\n\n    public Person getPerson(java.lang.Integer id) {\n        return getFacade().find(id);\n    }\n\n    public List&lt;Person&gt; getItemsAvailableSelectMany() {\n        return getFacade().findAll();\n    }\n\n    public List&lt;Person&gt; getItemsAvailableSelectOne() {\n        return getFacade().findAll();\n    }\n\n    @FacesConverter(forClass = Person.class)\n    public static class PersonControllerConverter implements Converter {\n\n        @Override\n        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {\n            if (value == null || value.length() == 0) {\n                return null;\n            }\n            PersonController controller = (PersonController) facesContext.getApplication().getELResolver().\n                    getValue(facesContext.getELContext(), null, \"personController\");\n            return controller.getPerson(getKey(value));\n        }\n\n        java.lang.Integer getKey(String value) {\n            java.lang.Integer key;\n            key = Integer.valueOf(value);\n            return key;\n        }\n\n        String getStringKey(java.lang.Integer value) {\n            StringBuilder sb = new StringBuilder();\n            sb.append(value);\n            return sb.toString();\n        }\n\n        @Override\n        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {\n            if (object == null) {\n                return null;\n            }\n            if (object instanceof Person) {\n                Person o = (Person) object;\n                return getStringKey(o.getId());\n            } else {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, \"object {0} is of type {1}; expected type: {2}\", new Object[]{object, object.getClass().getName(), Person.class.getName()});\n                return null;\n            }\n        }\n\n    }\n\n}\n","id":1},{"name":"acc.PersonFacade","group":8,"description":"<nobr>Package: null</nobr>","sourcecode":"Not available","id":2},{"name":"acc.ApplicationuserFacade","group":8,"description":"<nobr>Package: null</nobr>","sourcecode":"Not available","id":3}],"links":[{"source":3,"target":0,"value":1,"type":"EJB"},{"source":2,"target":1,"value":1,"type":"EJB"}]}
