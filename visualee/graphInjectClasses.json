{"nodes":[{"name":"ModelSB","group":2,"description":"<nobr>Package: demos.viewmodel.login</nobr>","sourcecode":"package demos.viewmodel.login;\n\nimport java.io.Serializable;\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.SessionScoped;\nimport javax.inject.Named;\n\n@Named\n@SessionScoped\npublic class ModelSB implements Serializable {\n\n    private String user;\n    private String password;\n\n\n    public String getUser() {\n        return user;\n    }\n\n    public void setUser(String user) {\n        this.user = user;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public boolean checkUserPwd() {\n        boolean isOk = false;\n        if (user != null && password != null) {\n            if (!user.isEmpty() && !password.isEmpty()) {\n                if (user.equals(password)) {\n                    isOk = true;\n                }\n            }\n        }\n        \n        return isOk;\n    }\n\n    //PostConstruct specifies the lifecycle callback method that \n    //the CDI framework calls after dependency injection \n    //but before the class is put into service.\n    @PostConstruct\n    public void init() {\n        System.out.println(\"init Model\");\n    }\n\n\n}\n","id":0},{"name":"DemoController","group":3,"description":"<nobr>Package: demos.controller</nobr><br/><br/>Injects:<br/><nobr>Model is injected</nobr><br/><nobr>InputTextDemoRB is injected</nobr>","sourcecode":"package demos.controller;\n\nimport demo.viewmodel.InputTextDemoRB;\nimport java.io.Serializable;\nimport javax.annotation.PostConstruct;\nimport javax.faces.view.ViewScoped;\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport model.Model;\n\n@Named\n@ViewScoped\npublic class DemoController implements Serializable {\n\n    //the model is always session scoped  - one model per user\n    @Inject\n    Model model;\n    \n    @Inject\n    InputTextDemoRB inputTextDemoRB;\n\n    public InputTextDemoRB getInputTextDemoRB() {\n        return inputTextDemoRB;\n    }\n\n    public void setInputTextDemoRB(InputTextDemoRB inputTextDemoRB) {\n        this.inputTextDemoRB = inputTextDemoRB;\n    }\n\n    \n    public void doSomething() {\n//        //----------------\n//        //schreibe ins modell\n        viewToModel();\n//\n//        //----------------\n//        //mach irgendetwas im model\n//        tryLogin();\n//\n//        //----------------\n//        //lese aus modell\n//        modelToView();\n    }\n\n    private void modelToView() {\n        inputTextDemoRB.setInputText01(model.getTextInput());\n    }\n\n    private void viewToModel() {\n        System.out.println(\"setting:\" + inputTextDemoRB.getInputText01());\n        model.setTextInput(inputTextDemoRB.getInputText01());\n    }\n\n\n    @PostConstruct\n    public void init() {\n        modelToView();\n        //inputTextDemoRB.setInputText01(\"init inputTextDemoRB from DemoController\");\n        System.out.println(\"init DemoController\");\n    }\n\n}\n","id":1},{"name":"LoginControllerVB","group":2,"description":"<nobr>Package: demos.viewmodel.login</nobr><br/><br/>Injects:<br/><nobr>LoginVB is injected</nobr><br/><nobr>ModelSB is injected</nobr>","sourcecode":"package demos.viewmodel.login;\n\nimport guis.utils.Helper;\nimport java.io.Serializable;\nimport javax.annotation.PostConstruct;\nimport javax.faces.view.ViewScoped;\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\n@Named\n@ViewScoped\npublic class LoginControllerVB implements Serializable {\n\n    @Inject\n    LoginVB loginVB;\n\n    //the model is always session scoped  - one model per user\n    @Inject\n    ModelSB modelSB;\n\n    public LoginVB getLoginVB() {\n        return loginVB;\n    }\n\n    public void setLoginVB(LoginVB loginVB) {\n        this.loginVB = loginVB;\n    }\n\n    public void doSomething() {\n        //----------------\n        //schreibe ins modell\n        viewToModel();\n\n        //----------------\n        //mach irgendetwas im model\n        tryLogin();\n\n        //----------------\n        //lese aus modell\n        modelToView();\n    }\n\n    private void modelToView() {\n        loginVB.setPwd(modelSB.getPassword());\n        loginVB.setUser(modelSB.getUser());\n    }\n\n    private void viewToModel() {\n        modelSB.setUser(loginVB.getUser());\n        modelSB.setPassword(loginVB.getPwd());\n    }\n\n    private void tryLogin() {\n        boolean loginDataOk = modelSB.checkUserPwd();\n        if (!loginDataOk) {\n            Helper.addErrorMessage(\"loginCmdID\", \"errorUserPassword\");\n        }\n    }\n\n    public String nextPage() {\n        boolean loginDataOk = modelSB.checkUserPwd();\n        String navigationTarget = \"login\";\n        if (loginDataOk) {\n            navigationTarget = \"/page100\";\n        }\n        return navigationTarget;\n    }\n\n    public String sorryMessage() {\n        String sorryMessage = null;\n\n        if (modelSB.getUser() != null) {\n            boolean loginDataOk = modelSB.checkUserPwd();\n            if (!loginDataOk) {\n                String[] params = new String[1];\n                params[0] = modelSB.getUser();\n                sorryMessage = Helper.getMessageString(\"notLoggedInMessage\", params);\n            }\n        }\n\n        return sorryMessage;\n    }\n\n    @PostConstruct\n    public void init() {\n        System.out.println(\"init LoginControllerVB\");\n        modelToView();\n    }\n\n}\n","id":2},{"name":"Ejb2JpaController","group":4,"description":"<nobr>Package: acc</nobr><br/><br/>EJB:<br/><nobr>acc.ApplicationuserFacade is injected as an EJB</nobr>","sourcecode":"package acc;\n\nimport entities.Applicationuser;\nimport acc.util.JsfUtil;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.ResourceBundle;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.ejb.EJB;\nimport javax.ejb.EJBException;\nimport javax.inject.Named;\nimport javax.enterprise.context.SessionScoped;\nimport javax.faces.component.UIComponent;\nimport javax.faces.context.FacesContext;\nimport javax.faces.convert.Converter;\nimport javax.faces.convert.FacesConverter;\n\n@Named(\"ejb2JpaController\")\n@SessionScoped\npublic class Ejb2JpaController implements Serializable {\n\n    @EJB\n    private acc.ApplicationuserFacade ejbFacade;\n    private List&lt;Applicationuser&gt; items = null;\n    private Applicationuser selected;\n\n    public Ejb2JpaController() {\n    }\n\n    public Applicationuser getSelected() {\n        return selected;\n    }\n\n    public void setSelected(Applicationuser selected) {\n        this.selected = selected;\n    }\n\n    protected void setEmbeddableKeys() {\n    }\n\n    protected void initializeEmbeddableKey() {\n    }\n\n    public Applicationuser prepareCreate() {\n        selected = new Applicationuser();\n        initializeEmbeddableKey();\n        \n        return selected;\n    }\n\n    private ApplicationuserFacade getFacade() {\n        return ejbFacade;\n    }\n\n    public void create(Applicationuser selected) {\n        String successMessage = ResourceBundle.getBundle(\"/Bundle\").getString(\"ApplicationuserCreated\");\n        if (selected != null) {\n            setEmbeddableKeys();\n            try {\n                getFacade().edit(selected);\n                JsfUtil.showSuccessMessage(successMessage);\n            } catch (EJBException ex) {\n                JsfUtil.showErrorMessageFromExceptionCause(ex, \"PersistenceErrorOccured\");\n            } catch (Exception ex) {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n                JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n            }\n        }\n        if (!JsfUtil.isValidationFailed()) {\n            items = null;    // Invalidate list of items to trigger re-query.\n        }\n    }\n\n    public void update(Applicationuser selected) {\n        String successMessage = ResourceBundle.getBundle(\"/Bundle\").getString(\"ApplicationuserUpdated\");\n        if (selected != null) {\n            setEmbeddableKeys();\n            try {\n                getFacade().edit(selected);\n                JsfUtil.showSuccessMessage(successMessage);\n            } catch (EJBException ex) {\n                JsfUtil.showErrorMessageFromExceptionCause(ex, \"PersistenceErrorOccured\");\n            } catch (Exception ex) {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n                JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n            }\n        }\n\n        //folgender Code mach Sinn, wenn das Update scheitert:\n        //selected = null; // Remove selection\n        //items = null;    // Invalidate list of items to trigger re-query.\n    }\n\n    public void destroy(Applicationuser selected) {\n        String successMessage = ResourceBundle.getBundle(\"/Bundle\").getString(\"ApplicationuserDeleted\");\n        if (selected != null) {\n            setEmbeddableKeys();\n            try {\n                getFacade().remove(selected);\n                JsfUtil.showSuccessMessage(successMessage);\n            } catch (EJBException ex) {\n                JsfUtil.showErrorMessageFromExceptionCause(ex, \"PersistenceErrorOccured\");\n            } catch (Exception ex) {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\n                JsfUtil.showErrorMessage(ex, \"PersistenceErrorOccured\");\n            }\n        }\n\n        if (!JsfUtil.isValidationFailed()) {\n            selected = null; // Remove selection\n            items = null;    // Invalidate list of items to trigger re-query.\n        }\n    }\n\n    public List&lt;Applicationuser&gt; getItems() {\n        if (items == null) {\n            items = getFacade().findAll();\n        }\n        return items;\n    }\n\n    public Applicationuser getApplicationuser(Integer id) {\n        return getFacade().find(id);\n    }\n\n    public List&lt;Applicationuser&gt; getItemsAvailableSelectMany() {\n        return getFacade().findAll();\n    }\n\n    public List&lt;Applicationuser&gt; getItemsAvailableSelectOne() {\n        return getFacade().findAll();\n    }\n\n    @FacesConverter(forClass = Applicationuser.class)\n    public static class ApplicationuserControllerConverter implements Converter {\n\n        @Override\n        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {\n            if (value == null || value.length() == 0) {\n                return null;\n            }\n            Ejb2JpaController controller = (Ejb2JpaController) facesContext.getApplication().getELResolver().\n                    getValue(facesContext.getELContext(), null, \"applicationuserController\");\n            return controller.getApplicationuser(getKey(value));\n        }\n\n        Integer getKey(String value) {\n            Integer key;\n            key = Integer.valueOf(value);\n            return key;\n        }\n\n        String getStringKey(Integer value) {\n            StringBuilder sb = new StringBuilder();\n            sb.append(value);\n            return sb.toString();\n        }\n\n        @Override\n        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {\n            if (object == null) {\n                return null;\n            }\n            if (object instanceof Applicationuser) {\n                Applicationuser o = (Applicationuser) object;\n                return getStringKey(o.getId());\n            } else {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, \"object {0} is of type {1}; expected type: {2}\", new Object[]{object, object.getClass().getName(), Applicationuser.class.getName()});\n                return null;\n            }\n        }\n\n    }\n\n}\n","id":3},{"name":"ApplicationuserControllerNew","group":4,"description":"<nobr>Package: acc</nobr><br/><br/>Injects:<br/><nobr>Ejb2JpaController is injected</nobr>","sourcecode":"package acc;\n\nimport entities.Applicationuser;\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.enterprise.context.SessionScoped;\nimport javax.faces.component.UIComponent;\nimport javax.faces.context.FacesContext;\nimport javax.faces.convert.Converter;\nimport javax.faces.convert.FacesConverter;\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\n@Named(\"applicationuserControllerNew\")\n@SessionScoped\npublic class ApplicationuserControllerNew implements Serializable {\n\n    @Inject\n    private Ejb2JpaController ejb2JpaController;\n\n    private List&lt;Applicationuser&gt; items = null;\n    private Applicationuser selected;\n\n    public ApplicationuserControllerNew() {\n    }\n\n    public Applicationuser getSelected() {\n        return selected;\n    }\n\n    public void setSelected(Applicationuser selected) {\n        this.selected = selected;\n    }\n\n    protected void setEmbeddableKeys() {\n    }\n\n    protected void initializeEmbeddableKey() {\n    }\n\n    public Applicationuser prepareCreate() {\n        selected = new Applicationuser();\n        initializeEmbeddableKey();\n        return selected;\n    }\n\n    public void createApplicationuser() {\n        ejb2JpaController.create(selected);\n    }\n\n    public void updateApplicationuser() {\n        ejb2JpaController.update(selected);\n    }\n\n    public void destroyApplicationuser() {\n        ejb2JpaController.destroy(selected);\n    }\n\n\n    public List&lt;Applicationuser&gt; getItems() {\n        items = ejb2JpaController.getItems();\n        return items;\n    }\n\n    public Applicationuser getApplicationuser(Integer id) {\n        Applicationuser au = ejb2JpaController.getApplicationuser(id);\n        return au;\n    }\n\n    public List&lt;Applicationuser&gt; getItemsAvailableSelectMany() {\n        List&lt;Applicationuser&gt; auList = ejb2JpaController.getItemsAvailableSelectMany();\n        return auList;\n    }\n\n    public List&lt;Applicationuser&gt; getItemsAvailableSelectOne() {\n        List&lt;Applicationuser&gt; auList = ejb2JpaController.getItemsAvailableSelectOne();\n        return auList;\n    }\n\n    @FacesConverter(forClass = Applicationuser.class)\n    public static class ApplicationuserControllerConverter implements Converter {\n\n        @Override\n        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {\n            if (value == null || value.length() == 0) {\n                return null;\n            }\n            ApplicationuserControllerNew controller = (ApplicationuserControllerNew) facesContext.getApplication().getELResolver().\n                    getValue(facesContext.getELContext(), null, \"applicationuserController\");\n            return controller.getApplicationuser(getKey(value));\n        }\n\n        Integer getKey(String value) {\n            Integer key;\n            key = Integer.valueOf(value);\n            return key;\n        }\n\n        String getStringKey(Integer value) {\n            StringBuilder sb = new StringBuilder();\n            sb.append(value);\n            return sb.toString();\n        }\n\n        @Override\n        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {\n            if (object == null) {\n                return null;\n            }\n            if (object instanceof Applicationuser) {\n                Applicationuser o = (Applicationuser) object;\n                return getStringKey(o.getId());\n            } else {\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, \"object {0} is of type {1}; expected type: {2}\", new Object[]{object, object.getClass().getName(), Applicationuser.class.getName()});\n                return null;\n            }\n        }\n\n    }\n\n}\n","id":4},{"name":"Page100Rvm","group":6,"description":"<nobr>Package: guis.page100</nobr>","sourcecode":"package guis.page100;\n\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.RequestScoped;\nimport javax.inject.Named;\n\n@Named\n@RequestScoped\npublic class Page100Rvm {\n\n    private String modelStatus;\n\n    public String getModelStatus() {\n        System.out.println(\"modelStatus in rvm gelesen als:\" + modelStatus);\n        return modelStatus;\n    }\n\n    public void setModelStatus(String modelStatus) {\n        System.out.println(\"modelStatus of rvm set to: \" + modelStatus);\n        this.modelStatus = modelStatus;\n    }\n\n    private String someText;\n\n    public String getSomeText() {\n        return someText;\n    }\n\n    public void setSomeText(String someText) {\n        this.someText = someText;\n    }\n    \n    private String someText2;\n\n    public String getSomeText2() {\n        return someText2;\n    }\n\n    public void setSomeText2(String someText2) {\n        this.someText2 = someText2;\n    }\n    \n    \n    @PostConstruct\n    public void init() {\n        System.out.println(\"init Page100Rvm\");\n    }\n\n}\n","id":5},{"name":"LoginVB","group":2,"description":"<nobr>Package: demos.viewmodel.login</nobr>","sourcecode":"package demos.viewmodel.login;\n\nimport java.io.Serializable;\nimport javax.annotation.PostConstruct;\nimport javax.faces.view.ViewScoped;\nimport javax.inject.Named;\n\n@Named\n@ViewScoped\npublic class LoginVB implements Serializable {\n\n    private String user;\n    private String pwd;\n    \n    public String getUser() {\n        return user;\n    }\n\n    public void setUser(String user) {\n        this.user = user;\n    }\n\n    public String getPwd() {\n        return pwd;\n    }\n\n    public void setPwd(String pwd) {\n        this.pwd = pwd;\n    }\n\n    @PostConstruct\n    public void init() {\n        System.out.println(\"init LoginVB\");\n    }\n\n}\n","id":6},{"name":"Page100Controller","group":6,"description":"<nobr>Package: guis.page100</nobr><br/><br/>Injects:<br/><nobr>Model is injected</nobr><br/><nobr>Page100Rvm is injected</nobr>","sourcecode":"package guis.page100;\n\nimport guis.utils.Helper;\nimport java.io.Serializable;\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.RequestScoped;\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport model.Model;\n\n@Named\n@RequestScoped\npublic class Page100Controller implements Serializable {\n\n    //the model is always session scoped  - one model per user\n    @Inject\n    Model model;\n\n    //the page100Rvm is in request scope\n    @Inject\n    Page100Rvm page100Rvm;\n    \n    public void setPage100Rvm(Page100Rvm page100Rvm) {\n        this.page100Rvm = page100Rvm;\n    }\n    \n    public Page100Rvm getPage100Rvm() {\n        return page100Rvm;\n    }\n    \n    public void submit() {\n        System.out.println(\"submit button hit\");\n        doSomething();\n    }\n    \n    public String welcomeMessage() {\n        \n        String[] params = new String[1];\n        model.setUser(\"lieber Benutzer\");\n        params[0] = model.getUser();\n        System.out.println(\"model.getUser()=\" + model.getUser());\n        String welcomeMessage = Helper.getMessageString(\"welcomeUserMessage\", params);\n        \n        return welcomeMessage;\n    }\n    \n    public void doSomething() {\n        //----------------\n        //schreibe ins modell\n        viewToModel();\n        //----------------\n        //mach irgendetwas im model\n        //model.doSomething();\n        //model.updateModelStatus01();\n        //----------------\n        //lese aus modell\n        modelToView();\n    }\n    \n    private void modelToView() {\n        page100Rvm.setSomeText(model.getSomeText());\n        page100Rvm.setSomeText2(model.getSomeText2());\n        page100Rvm.setModelStatus(model.getModelStatus01());\n    }\n    \n    private void viewToModel() {\n        model.setSomeText(page100Rvm.getSomeText());\n        model.setSomeText2(page100Rvm.getSomeText2());\n        model.updateModelStatus01();\n    }\n    \n    @PostConstruct\n    public void init() {\n        \n        System.out.println(\"init controller\");\n        \n        modelToView();\n        \n    }\n    \n}\n","id":7},{"name":"PreferredThemeSB","group":1,"description":"<nobr>Package: demos.viewmodels.themeSwitcher</nobr>","sourcecode":"package demos.viewmodels.themeSwitcher;\n\nimport java.io.Serializable;\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.SessionScoped;\nimport javax.inject.Named;\n\n@Named\n@SessionScoped\npublic class PreferredThemeSB implements Serializable {\n\n    ThemeInfo preferredThemeInfo;\n\n    public ThemeInfo getPreferredThemeInfo() {\n        return preferredThemeInfo;\n    }\n\n    public void setPreferredThemeInfo(ThemeInfo preferredThemeInfo) {\n        this.preferredThemeInfo = preferredThemeInfo;\n    }\n\n    @PostConstruct\n    public void init() {\n        System.out.println(\"init PreferredThemeSB\");\n//        preferredThemeInfo = new ThemeInfo(\"south-street\", \"South Street\");\n        preferredThemeInfo = new ThemeInfo(\"bluesky\", \"Bluesky\");\n    }\n\n}\n","id":8},{"name":"InputTextDemoRB","group":11,"description":"<nobr>Package: demo.viewmodel</nobr>","sourcecode":"package demo.viewmodel;\n\nimport java.io.Serializable;\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.RequestScoped;\nimport javax.inject.Named;\n\n@Named\n@RequestScoped\npublic class InputTextDemoRB implements Serializable {\n\n    private String inputText01;\n\n    public String getInputText01() {\n        return inputText01;\n    }\n\n    public void setInputText01(String inputText01) {\n        this.inputText01 = inputText01;\n    }\n    \n    @PostConstruct\n    public void init() {\n        System.out.println(\"init InputTextDemoRB\");\n    }\n\n}\n","id":9},{"name":"ThemeSwitcherBean","group":1,"description":"<nobr>Package: demos.viewmodels.themeSwitcher</nobr><br/><br/>Injects:<br/><nobr>PreferredThemeSB is injected</nobr>","sourcecode":"package demos.viewmodels.themeSwitcher;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.RequestScoped;\nimport javax.faces.event.AjaxBehaviorEvent;\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport org.primefaces.component.themeswitcher.ThemeSwitcher;\n\n@Named\n@RequestScoped\npublic class ThemeSwitcherBean implements Serializable {\n\n    ArrayList&lt;ThemeInfo&gt; selectableThemes;\n\n    public ArrayList&lt;ThemeInfo&gt; getSelectableThemes() {\n        return selectableThemes;\n    }\n\n    public void setSelectableThemes(ArrayList&lt;ThemeInfo&gt; selectableThemes) {\n        this.selectableThemes = selectableThemes;\n    }\n\n    private String selectedTheme;\n\n    public String getSelectedTheme() {\n        return selectedTheme;\n    }\n\n    public void setSelectedTheme(String selectedTheme) {\n        this.selectedTheme = selectedTheme;\n        System.out.println(\"selectedTheme=\" + selectedTheme);\n    }\n\n    @Inject\n    PreferredThemeSB preferredThemeSB;\n\n    public void setPreferredThemeSB(PreferredThemeSB preferredThemeSB) {\n        this.preferredThemeSB = preferredThemeSB;\n    }\n\n    public void saveTheme(AjaxBehaviorEvent ajax) {\n        String themeKey = (String) ((ThemeSwitcher) ajax.getSource()).getValue();\n        System.out.println((String) ((ThemeSwitcher) ajax.getSource()).toString());\n        System.out.println(\"setting themeKey to \" + themeKey);\n\n        ThemeInfo selectedThemeInfo = null;\n        for (ThemeInfo t : selectableThemes) {\n            if (t.getKey().equals(themeKey)) {\n                selectedThemeInfo = t;\n                break;\n            }\n        }\n        preferredThemeSB.setPreferredThemeInfo(selectedThemeInfo);\n    }\n\n    @PostConstruct\n    public void init() {\n\n        System.out.println(\"init ThemeSwitcherBean\");\n\n        ThemeInfo t1 = new ThemeInfo(\"bootstrap\", \"Bootstrap\");\n        ThemeInfo t2 = new ThemeInfo(\"afterdark\", \"Afterdark\");\n        ThemeInfo t3 = new ThemeInfo(\"south-street\", \"South Street\");\n        ThemeInfo t4 = new ThemeInfo(\"bluesky\", \"Bluesky\");\n        ThemeInfo t5 = new ThemeInfo(\"casablanca\", \"Casablanca\");\n        ThemeInfo t6 = new ThemeInfo(\"excite-bike\", \"Excite-Bike\");\n\n        selectableThemes = new ArrayList&lt;&gt;();\n        selectableThemes.add(t1);\n        selectableThemes.add(t2);\n        selectableThemes.add(t3);\n        selectableThemes.add(t4);\n        selectableThemes.add(t5);\n        selectableThemes.add(t6);\n\n        // theme = \"south-street\"; // init\n//        themes = new TreeMap&lt;&gt;();\n//        themes.put(\"Bootstrap\", \"bootstrap\");\n//        themes.put(\"Afterdark\", \"afterdark\");\n//        themes.put(\"Afternoon\", \"afternoon\");\n//        themes.put(\"Aristo\", \"aristo\");\n//        themes.put(\"Black-Tie\", \"black-tie\");\n//        themes.put(\"Blitzer\", \"blitzer\");\n//        themes.put(\"Bluesky\", \"bluesky\");\n//        themes.put(\"Casablanca\", \"casablanca\");\n//        themes.put(\"Cupertino\", \"cupertino\");\n//        themes.put(\"Cruze\", \"cruze\");\n//        themes.put(\"Dark-Hive\", \"dark-hive\");\n//        themes.put(\"Delta\", \"delta\");\n//        themes.put(\"Dot-Luv\", \"dot-luv\");\n//        themes.put(\"Eggplant\", \"eggplant\");\n//        themes.put(\"Excite-Bike\", \"excite-bike\");\n//        themes.put(\"Flick\", \"flick\");\n//        themes.put(\"Glass-X\", \"glass-x\");\n//        themes.put(\"Home\", \"home\");\n//        themes.put(\"Hot-Sneaks\", \"hot-sneaks\");\n//        themes.put(\"Humanity\", \"humanity\");\n//        themes.put(\"Le-Frog\", \"le-frog\");\n//        themes.put(\"Midnight\", \"midnight\");\n//        themes.put(\"Mint-Choc\", \"mint-choc\");\n//        themes.put(\"Overcast\", \"overcast\");\n//        themes.put(\"Pepper-Grinder\", \"pepper-grinder\");\n//        themes.put(\"Redmond\", \"redmond\");\n//        themes.put(\"Rocket\", \"rocket\");\n//        themes.put(\"Sam\", \"sam\");\n//        themes.put(\"Smoothness\", \"smoothness\");\n//        themes.put(\"South-Street\", \"south-street\");\n//        themes.put(\"Start\", \"start\");\n//        themes.put(\"Sunny\", \"sunny\");\n//        themes.put(\"Swanky-Purse\", \"swanky-purse\");\n//        themes.put(\"Trontastic\", \"trontastic\");\n//        themes.put(\"UI-Darkness\", \"ui-darkness\");\n//        themes.put(\"UI-Lightness\", \"ui-lightness\");\n//        themes.put(\"Vader\", \"vader\");\n    }\n\n}\n","id":10},{"name":"Model","group":14,"description":"<nobr>Package: model</nobr>","sourcecode":"package model;\n\nimport bizmodel.BizModel;\nimport guis.utils.Helper;\nimport java.io.Serializable;\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.SessionScoped;\nimport javax.inject.Named;\n\n@Named\n@SessionScoped\npublic class Model implements Serializable {\n\n    private BizModel bizModel;\n\n    //PostConstruct specifies the lifecycle callback method that \n    //the CDI framework calls after dependency injection \n    //but before the class is put into service.\n    @PostConstruct\n    public void init() {\n        System.out.println(\"init Model\");\n        bizModel = new BizModel();\n        bizModel.init();\n        updateModelStatus01();\n    }\n\n    public String getTextInput() {\n        return bizModel.getTextInput();\n    }\n\n    public void setTextInput(String textInput) {\n        bizModel.setTextInput(textInput);\n        System.out.println(\"textInput was set to: \" + textInput);\n    }\n\n    public String getSomeText2() {\n        return bizModel.getSomeText2();\n    }\n\n    public void setSomeText2(String someText2) {\n        bizModel.setSomeText2(someText2);\n    }\n\n    public String getSomeText() {\n        return bizModel.getSomeText();\n    }\n\n    public void setSomeText(String someText) {\n        bizModel.setSomeText(someText);\n    }\n\n    private String modelStatus01;\n\n    public String getModelStatus01() {\n        return modelStatus01;\n    }\n\n    public String getUser() {\n        return bizModel.getUser();\n    }\n\n    public void setUser(String user) {\n        bizModel.setUser(user);\n    }\n\n    public String getPassword() {\n        return bizModel.getPassword();\n    }\n\n    public void setPassword(String password) {\n        bizModel.setPassword(password);\n    }\n\n    public boolean checkUserPwd() {\n        return bizModel.checkUserPwd();\n    }\n\n    public void updateModelStatus01() {\n        System.out.println(\"in updateModelStatus01\");\n        String requestID = Helper._getRequestHashCode();\n        requestID = (requestID == null) ? \"\" : requestID;\n        String sessionID = Helper._getSessionID();\n        sessionID = (sessionID == null) ? \"\" : sessionID;\n        String usr = bizModel.getUser();\n        bizModel.getUser();\n        usr = (usr == null) ? \"\" : usr;\n        String status = \"user: \" + usr + \" | Session: \" + sessionID + \" | Model data from RequestHash: \" + requestID;\n        System.out.println(\"status=\" + status);\n        System.out.println(\"----------------------------------------------\");\n        System.out.println(\"textInput=\" + bizModel.getTextInput());\n        this.modelStatus01 = status;\n    }\n\n}\n","id":11}],"links":[{"source":3,"target":4,"value":1,"type":"INJECT"},{"source":8,"target":10,"value":1,"type":"INJECT"},{"source":11,"target":1,"value":1,"type":"INJECT"},{"source":9,"target":1,"value":1,"type":"INJECT"},{"source":6,"target":2,"value":1,"type":"INJECT"},{"source":0,"target":2,"value":1,"type":"INJECT"},{"source":11,"target":7,"value":1,"type":"INJECT"},{"source":5,"target":7,"value":1,"type":"INJECT"}]}
